package tukano.api.servers.java;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

public class JavaBlobs implements Blobs {


    private Map<String, byte[]> blobFileMap = new HashMap<>();

    private static Logger Log = Logger.getLogger(JavaBlobs.class.getName());

    /**
	 * Uploads a short video blob resource. Must validate the blobId to ensure it
	 * was generated by the Shorts service.
	 * 
	 * @param blobId the identifier generated by the Shorts service for this
	 *               blob
	 * @param bytes  the contents in bytes of the blob resource
	 * 
	 * @return OK(void) if the upload is new or if the blobId and bytes match an
	 *         existing blob;
	 *         CONFLICT if a blobId exists but bytes do not match;
	 *         FORBIDDEN if the blobId is not valid
	 */
    @Override
    public Result<Void> upload(String blobId, byte[] bytes) {
        if (!isValidBlobId(blobId)) {
            return Result.error(Result.ErrorCode.FORBIDDEN);
        }
        if (blobFileMap.containsKey(blobId) && !Arrays.equals(blobFileMap.get(blobId), bytes))
            return Result.error(Result.ErrorCode.CONFLICT);

        blobFileMap.put(blobId, bytes);
        return Result.ok();
    }


    /**
     * Downloads a short video blob resource in a single byte chunk of bytes.
     *
     * @param blobId the id of the blob;
     * @return (OK, bytes), if the blob exists;
     * 			 NOT_FOUND, if no blob matches the provided blobId
     */
    @Override
    public Result<byte[]> download(String blobId) {

        if (!blobFileMap.containsKey(blobId))
            return Result.error(Result.ErrorCode.NOT_FOUND);

        return Result.ok(blobFileMap.get(blobId));
    }

    /**
     * Checks if the blobId is a valid ID
     * @param blobId the id of the blob
     * @return true, if blobId is valid
     *          false, if blobId is not valid
     */
    private boolean isValidBlobId(String blobId) {
        if (blobId != null && !blobId.isEmpty()) {
            if (blobId.contains("/blobs/"))
                return true;
        }
        return false;
    }

}

    